import React, { useState } from 'react';
import { toast, ToastContainer } from 'react-toastify';
import { useAuth } from '../../../../Auth/AuthContext';
import axios from 'axios';
import 'react-toastify/dist/ReactToastify.css';
import './style/CreateBudget.css';
import { API_URL } from '../../../../config/api';


const CreateBudget = () => {
  const { currentUser } = useAuth();
  const departmentId = currentUser?.department_id;

  const [showModal, setShowModal] = useState(false);
  const [files, setFiles] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleFileSelect = (e) => {
    const selectedFiles = Array.from(e.target.files);
    const validFiles = selectedFiles.filter(file => file.name.endsWith('.csv'));
    if (validFiles.length > 0) {
      setFiles(prev => [...prev, ...validFiles]);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    const droppedFiles = Array.from(e.dataTransfer.files);
    const validFiles = droppedFiles.filter(file => file.name.endsWith('.csv'));
    if (validFiles.length > 0) {
      setFiles(prev => [...prev, ...validFiles]);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDeleteFile = (indexToDelete) => {
    setFiles(prev => prev.filter((_, index) => index !== indexToDelete));
  };

  const handleSend = async () => {
    // Validate department ID
    if (!departmentId) {
      toast.error('Department ID is not available. Please login again.');
      return;
    }
  
    // Ensure files are selected
    if (files.length === 0) {
      toast.error('Please select at least one CSV file.');
      return;
    }
  
    setIsLoading(true);
  
    try {
      // Create FormData for file upload
      const formData = new FormData();
      files.forEach(file => {
        formData.append('files', file); // Append each file to the FormData
      });
  
      // Log details for debugging
      console.log('Uploading budget files:', files);
      console.log('Department ID:', departmentId);
      console.log('Endpoint:', `${API_URL}/departments/${departmentId}/budgets/upload`);
  
      // Make API call to upload budget files
      const response = await axios.post(
        `${API_URL}/departments/${departmentId}/budgets/upload`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );
  
      // Success toast
      toast.success('Budget upload successful!', {
        position: "top-right",
        autoClose: 3000,
      });
  
      // Log full response
      console.log('Budget Upload Response:', response);
  
      // Reset state after successful upload
      setTimeout(() => {
        setShowModal(false);
        setFiles([]);
      }, 2000);
  
    } catch (error) {
      // Log and show error details
      console.error('Budget Upload Error:', error);
      const errorMessage = error.response?.data?.message || 'Failed to upload budget';
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
    <ToastContainer />
      <button
        className="btn create-budget-btn"
        onClick={() => setShowModal(true)}
      >
        Create Budget
      </button>

      {showModal && (
        <>
          {/* Modal Overlay */}
          <div className="modal-overlay" onClick={() => setShowModal(false)}></div>
          <div className="modal create-budget" style={{ display: 'block' }}>
            <div className="modal-dialog">
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title text-center">Create Budget</h5>
                  <button type="button" className="close" onClick={() => setShowModal(false)}>
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" viewBox="0 0 24 25" fill="none">
                      <path d="M19.2806 18.7193C19.3503 18.789 19.4056 18.8717 19.4433 18.9628C19.481 19.0538 19.5004 19.1514 19.5004 19.2499C19.5004 19.3485 19.481 19.4461 19.4433 19.5371C19.4056 19.6281 19.3503 19.7109 19.2806 19.7806C19.2109 19.8502 19.1282 19.9055 19.0372 19.9432C18.9461 19.9809 18.8486 20.0003 18.75 20.0003C18.6515 20.0003 18.5539 19.9809 18.4628 19.9432C18.3718 19.9055 18.2891 19.8502 18.2194 19.7806L12 13.5602L5.78063 19.7806C5.6399 19.9213 5.44903 20.0003 5.25001 20.0003C5.05098 20.0003 4.86011 19.9213 4.71938 19.7806C4.57865 19.6398 4.49959 19.449 4.49959 19.2499C4.49959 19.0509 4.57865 18.86 4.71938 18.7193L10.9397 12.4999L4.71938 6.28055C4.57865 6.13982 4.49959 5.94895 4.49959 5.74993C4.49959 5.55091 4.57865 5.36003 4.71938 5.2193C4.86011 5.07857 5.05098 4.99951 5.25001 4.99951C5.44903 4.99951 5.6399 5.07857 5.78063 5.2193L12 11.4396L18.2194 5.2193C18.3601 5.07857 18.551 4.99951 18.75 4.99951C18.949 4.99951 19.1399 5.07857 19.2806 5.2193C19.4214 5.36003 19.5004 5.55091 19.5004 5.74993C19.5004 5.94895 19.4214 6.13982 19.2806 6.28055L13.0603 12.4999L19.2806 18.7193Z" fill="#6A6A6A" />
                    </svg>
                  </button>
                </div>
                <div className="modal-body">
                  {/* Upload Container */}
                  <div
                    className="upload-container"
                    onDragOver={handleDragOver}
                    onDrop={handleDrop}
                  >
                    <div className="upload-content">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                        <path d="M21 13.5V19.5C21 19.6989 20.921 19.8897 20.7803 20.0303C20.6397 20.171 20.4489 20.25 20.25 20.25H3.75C3.55109 20.25 3.36032 20.171 3.21967 20.0303C3.07902 19.8897 3 19.6989 3 19.5V13.5C3 13.3011 3.07902 13.1103 3.21967 12.9697C3.36032 12.829 3.55109 12.75 3.75 12.75C3.94891 12.75 4.13968 12.829 4.28033 12.9697C4.42098 13.1103 4.5 13.3011 4.5 13.5V18.75H19.5V13.5C19.5 13.3011 19.579 13.1103 19.7197 12.9697C19.8603 12.829 20.0511 12.75 20.25 12.75C20.4489 12.75 20.6397 12.829 20.7803 12.9697C20.921 13.1103 21 13.3011 21 13.5ZM11.4694 14.0306C11.539 14.1004 11.6217 14.1557 11.7128 14.1934C11.8038 14.2312 11.9014 14.2506 12 14.2506C12.0986 14.2506 12.1962 14.2312 12.2872 14.1934C12.3783 14.1557 12.461 14.1004 12.5306 14.0306L16.2806 10.2806C16.3503 10.2109 16.4056 10.1282 16.4433 10.0372C16.481 9.94613 16.5004 9.84855 16.5004 9.75C16.5004 9.65145 16.481 9.55387 16.4433 9.46283C16.4056 9.37178 16.3503 9.28906 16.2806 9.21937C16.2109 9.14969 16.1282 9.09442 16.0372 9.0567C15.9461 9.01899 15.8485 8.99958 15.75 8.99958C15.6515 8.99958 15.5539 9.01899 15.4628 9.0567C15.3718 9.09442 15.2891 9.14969 15.2194 9.21937L12.75 11.6897V3C12.75 2.80109 12.671 2.61032 12.5303 2.46967C12.3897 2.32902 12.1989 2.25 12 2.25C11.8011 2.25 11.6103 2.32902 11.4697 2.46967C11.329 2.61032 11.25 2.80109 11.25 3V11.6897L8.78063 9.21937C8.63989 9.07864 8.44902 8.99958 8.25 8.99958C8.05098 8.99958 7.86011 9.07864 7.71937 9.21937C7.57864 9.36011 7.49958 9.55098 7.49958 9.75C7.49958 9.94902 7.57864 10.1399 7.71937 10.2806L11.4694 14.0306Z" fill="#6A6A6A" />
                      </svg>
                      <p>Drag and Drop or <span className="browse-link" onClick={() => document.getElementById('fileInput').click()}>Browse</span> your files</p>
                      <small>Supported format: CSV</small>
                      <input
                        id="fileInput"
                        type="file"
                        accept=".csv"
                        onChange={handleFileSelect}
                        style={{ display: 'none' }}
                        multiple
                      />
                    </div>
                  </div>

                  {/* Files List */}
                  {files.length > 0 && (
                    <div className="files-list">
                      {files.map((file, index) => (
                        <div key={index} className="file-display">
                          <div className="file-info">
                          <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40" fill="none">
                              <path d="M7.1875 28.125C7.1875 30.0203 8.44844 31.5625 10 31.5625C10.344 31.5558 10.683 31.4792 10.9965 31.3374C11.31 31.1955 11.5913 30.9914 11.8234 30.7375C11.9972 30.5661 12.231 30.4693 12.475 30.4675C12.7191 30.4658 12.9542 30.5593 13.1304 30.7282C13.3066 30.8971 13.41 31.128 13.4186 31.3719C13.4272 31.6158 13.3404 31.8535 13.1766 32.0344C12.7705 32.4722 12.2794 32.8226 11.7331 33.0638C11.1869 33.3051 10.5971 33.4323 10 33.4375C7.41562 33.4375 5.3125 31.0547 5.3125 28.125C5.3125 25.1953 7.41562 22.8125 10 22.8125C10.5974 22.8181 11.1873 22.9458 11.7335 23.1876C12.2797 23.4294 12.7708 23.7803 13.1766 24.2188C13.3404 24.3996 13.4272 24.6373 13.4186 24.8812C13.41 25.1251 13.3066 25.3561 13.1304 25.5249C12.9542 25.6938 12.7191 25.7873 12.475 25.7856C12.231 25.7838 11.9972 25.687 11.8234 25.5156C11.5916 25.261 11.3104 25.0563 10.9969 24.9139C10.6834 24.7716 10.3442 24.6945 10 24.6875C8.44844 24.6875 7.1875 26.2281 7.1875 28.125ZM19.8516 27.0672C18.1547 26.5781 17.7563 26.3344 17.8203 25.8313C17.8293 25.6733 17.8746 25.5195 17.9526 25.3818C18.0306 25.2442 18.1394 25.1263 18.2703 25.0375C19.1453 24.4453 21.0297 24.7531 21.6219 24.9062C21.8601 24.9632 22.1111 24.9248 22.3213 24.7991C22.5314 24.6734 22.6841 24.4704 22.7465 24.2336C22.809 23.9968 22.7763 23.745 22.6555 23.532C22.5347 23.3189 22.3353 23.1617 22.1 23.0938C21.7875 23.0109 18.9594 22.3125 17.2234 23.4813C16.871 23.72 16.5752 24.0332 16.3571 24.3987C16.1389 24.7643 16.0037 25.1733 15.9609 25.5969C15.6797 27.8141 17.8766 28.4484 19.3313 28.8687C21.225 29.4156 21.6406 29.7016 21.55 30.3938C21.542 30.5597 21.4954 30.7214 21.4141 30.8662C21.3327 31.0111 21.2188 31.135 21.0812 31.2281C20.2047 31.8109 18.35 31.4844 17.7703 31.325C17.5381 31.277 17.2964 31.3188 17.0937 31.4419C16.8911 31.565 16.7426 31.7603 16.6782 31.9885C16.6139 32.2167 16.6383 32.4609 16.7468 32.6717C16.8552 32.8826 17.0395 33.0446 17.2625 33.125C18.011 33.3245 18.7816 33.4295 19.5563 33.4375C20.4141 33.4375 21.3594 33.2891 22.1125 32.7906C22.4747 32.549 22.7789 32.2302 23.0034 31.8571C23.2279 31.4841 23.3671 31.066 23.4109 30.6328C23.725 28.1859 21.3938 27.5125 19.8516 27.0656V27.0672ZM32.8203 22.8672C32.7044 22.8257 32.5814 22.8075 32.4584 22.8136C32.3355 22.8197 32.2149 22.8499 32.1036 22.9026C31.9923 22.9552 31.8925 23.0293 31.8099 23.1206C31.7272 23.2118 31.6633 23.3184 31.6219 23.4344L29.375 29.7109L27.1328 23.4375C27.0961 23.3162 27.0352 23.2035 26.9537 23.1064C26.8722 23.0093 26.7718 22.9297 26.6587 22.8725C26.5456 22.8152 26.422 22.7815 26.2955 22.7734C26.169 22.7653 26.0422 22.7829 25.9226 22.8252C25.8031 22.8675 25.6934 22.9336 25.6002 23.0195C25.507 23.1055 25.4321 23.2094 25.3802 23.325C25.3283 23.4407 25.3004 23.5657 25.2981 23.6924C25.2959 23.8192 25.3194 23.9451 25.3672 24.0625L28.4922 32.8125C28.5573 32.9945 28.677 33.152 28.835 33.2634C28.9931 33.3747 29.1817 33.4345 29.375 33.4345C29.5683 33.4345 29.7569 33.3747 29.915 33.2634C30.073 33.152 30.1927 32.9945 30.2578 32.8125L33.3828 24.0625C33.4659 23.8282 33.4525 23.5704 33.3455 23.3459C33.2386 23.1215 33.0468 22.9487 32.8125 22.8656L32.8203 22.8672ZM33.4375 13.75V17.5C33.4375 17.7486 33.3387 17.9871 33.1629 18.1629C32.9871 18.3387 32.7486 18.4375 32.5 18.4375C32.2514 18.4375 32.0129 18.3387 31.8371 18.1629C31.6613 17.9871 31.5625 17.7486 31.5625 17.5V14.6875H23.75C23.5014 14.6875 23.2629 14.5887 23.0871 14.4129C22.9113 14.2371 22.8125 13.9986 22.8125 13.75V5.9375H8.75C8.66712 5.9375 8.58763 5.97042 8.52903 6.02903C8.47042 6.08763 8.4375 6.16712 8.4375 6.25V17.5C8.4375 17.7486 8.33873 17.9871 8.16291 18.1629C7.9871 18.3387 7.74864 18.4375 7.5 18.4375C7.25136 18.4375 7.0129 18.3387 6.83709 18.1629C6.66127 17.9871 6.5625 17.7486 6.5625 17.5V6.25C6.5625 5.66984 6.79297 5.11344 7.2032 4.7032C7.61344 4.29297 8.16984 4.0625 8.75 4.0625H23.75C23.9986 4.06272 24.2369 4.16163 24.4125 4.3375L33.1625 13.0875C33.3384 13.2631 33.4373 13.5014 33.4375 13.75ZM30.2359 12.8125L24.6875 7.2625V12.8125H30.2359Z" fill="#97E0F7" />
                            </svg>
                            <div className="file-details">
                              <span className="file-name">{file.name}</span>
                              <span className="file-size">{Math.round(file.size / 1024)} KB</span>
                            </div>
                          </div>
                          <button onClick={() => handleDeleteFile(index)} className="delete-btn">
                          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                              <path d="M16.875 3.75H13.75V3.125C13.75 2.62772 13.5525 2.15081 13.2008 1.79917C12.8492 1.44754 12.3723 1.25 11.875 1.25H8.125C7.62772 1.25 7.15081 1.44754 6.79917 1.79917C6.44754 2.15081 6.25 2.62772 6.25 3.125V3.75H3.125C2.95924 3.75 2.80027 3.81585 2.68306 3.93306C2.56585 4.05027 2.5 4.20924 2.5 4.375C2.5 4.54076 2.56585 4.69973 2.68306 4.81694C2.80027 4.93415 2.95924 5 3.125 5H3.75V16.25C3.75 16.5815 3.8817 16.8995 4.11612 17.1339C4.35054 17.3683 4.66848 17.5 5 17.5H15C15.3315 17.5 15.6495 17.3683 15.8839 17.1339C16.1183 16.8995 16.25 16.5815 16.25 16.25V5H16.875C17.0408 5 17.1997 4.93415 17.3169 4.81694C17.4342 4.69973 17.5 4.54076 17.5 4.375C17.5 4.20924 17.4342 4.05027 17.3169 3.93306C17.1997 3.81585 17.0408 3.75 16.875 3.75ZM7.5 3.125C7.5 2.95924 7.56585 2.80027 7.68306 2.68306C7.80027 2.56585 7.95924 2.5 8.125 2.5H11.875C12.0408 2.5 12.1997 2.56585 12.3169 2.68306C12.4342 2.80027 12.5 2.95924 12.5 3.125V3.75H7.5V3.125ZM15 16.25H5V5H15V16.25ZM8.75 8.125V13.125C8.75 13.2908 8.68415 13.4497 8.56694 13.5669C8.44973 13.6842 8.29076 13.75 8.125 13.75C7.95924 13.75 7.80027 13.6842 7.68306 13.5669C7.56585 13.4497 7.5 13.2908 7.5 13.125V8.125C7.5 7.95924 7.56585 7.80027 7.68306 7.68306C7.80027 7.56585 7.95924 7.5 8.125 7.5C8.29076 7.5 8.44973 7.56585 8.56694 7.68306C8.68415 7.80027 8.75 7.95924 8.75 8.125ZM12.5 8.125V13.125C12.5 13.2908 12.4342 13.4497 12.3169 13.5669C12.1997 13.6842 12.0408 13.75 11.875 13.75C11.7092 13.75 11.5503 13.6842 11.4331 13.5669C11.3158 13.4497 11.25 13.2908 11.25 13.125V8.125C11.25 7.95924 11.3158 7.80027 11.4331 7.68306C11.5503 7.56585 11.7092 7.5 11.875 7.5C12.0408 7.5 12.1997 7.56585 12.3169 7.68306C12.4342 7.80027 12.5 7.95924 12.5 8.125Z" fill="#6A6A6A" />
                            </svg>
                          </button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                <div className="modal-footer">
                  <button
                    type="button"
                    className="btn btn-send"
                    disabled={files.length === 0 || isLoading}
                    onClick={handleSend}
                  >
                    {isLoading ? 'Uploading...' : 'Send'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </>
  );
};

export default CreateBudget;